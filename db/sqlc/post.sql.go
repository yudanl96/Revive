// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts(
    id, user_id, description, price
) VALUES (?, ?, ?, ?)
`

type CreatePostParams struct {
	ID          string
	UserID      string
	Description string
	Price       int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.Description,
		arg.Price,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, user_id, description, price, sold, created_at, updated_at FROM posts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Price,
		&i.Sold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, user_id, description, price, sold, created_at, updated_at FROM posts
ORDER BY updated_at DESC, id ASC
LIMIT ? OFFSET ?
`

type ListPostsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Price,
			&i.Sold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts SET description = ?, price = ?, sold = ?
WHERE id=?
`

type UpdatePostParams struct {
	Description string
	Price       int32
	Sold        bool
	ID          string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.Description,
		arg.Price,
		arg.Sold,
		arg.ID,
	)
	return err
}
