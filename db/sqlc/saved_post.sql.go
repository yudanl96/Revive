// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: saved_post.sql

package db

import (
	"context"
	"database/sql"
)

const createSavedPost = `-- name: CreateSavedPost :execresult
INSERT INTO saved_posts(
    user_id, post_id
) VALUES (?, ?)
`

type CreateSavedPostParams struct {
	UserID string
	PostID string
}

func (q *Queries) CreateSavedPost(ctx context.Context, arg CreateSavedPostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSavedPost, arg.UserID, arg.PostID)
}

const deleteSavedPost = `-- name: DeleteSavedPost :execresult
DELETE FROM saved_posts 
WHERE user_id = ? AND post_id = ?
`

type DeleteSavedPostParams struct {
	UserID string
	PostID string
}

func (q *Queries) DeleteSavedPost(ctx context.Context, arg DeleteSavedPostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSavedPost, arg.UserID, arg.PostID)
}

const getSavedPostByPost = `-- name: GetSavedPostByPost :many
SELECT user_id, post_id, saved_at FROM saved_posts
WHERE post_id = ? LIMIT ? OFFSET ?
`

type GetSavedPostByPostParams struct {
	PostID string
	Limit  int32
	Offset int32
}

func (q *Queries) GetSavedPostByPost(ctx context.Context, arg GetSavedPostByPostParams) ([]SavedPost, error) {
	rows, err := q.db.QueryContext(ctx, getSavedPostByPost, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedPost
	for rows.Next() {
		var i SavedPost
		if err := rows.Scan(&i.UserID, &i.PostID, &i.SavedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSavedPostByUser = `-- name: GetSavedPostByUser :many
SELECT user_id, post_id, saved_at FROM saved_posts
WHERE user_id = ? LIMIT ? OFFSET ?
`

type GetSavedPostByUserParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) GetSavedPostByUser(ctx context.Context, arg GetSavedPostByUserParams) ([]SavedPost, error) {
	rows, err := q.db.QueryContext(ctx, getSavedPostByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedPost
	for rows.Next() {
		var i SavedPost
		if err := rows.Scan(&i.UserID, &i.PostID, &i.SavedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSavedPostsByPost = `-- name: ListSavedPostsByPost :many
SELECT user_id, post_id, saved_at FROM saved_posts
WHERE post_id = ?
ORDER BY saved_at DESC
`

func (q *Queries) ListSavedPostsByPost(ctx context.Context, postID string) ([]SavedPost, error) {
	rows, err := q.db.QueryContext(ctx, listSavedPostsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedPost
	for rows.Next() {
		var i SavedPost
		if err := rows.Scan(&i.UserID, &i.PostID, &i.SavedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSavedPostsByUser = `-- name: ListSavedPostsByUser :many
SELECT user_id, post_id, saved_at FROM saved_posts
WHERE user_id = ?
ORDER BY saved_at DESC
`

func (q *Queries) ListSavedPostsByUser(ctx context.Context, userID string) ([]SavedPost, error) {
	rows, err := q.db.QueryContext(ctx, listSavedPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedPost
	for rows.Next() {
		var i SavedPost
		if err := rows.Scan(&i.UserID, &i.PostID, &i.SavedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
